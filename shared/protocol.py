"""
protocol.py
ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu v√† c√°c lo·∫°i tin nh·∫Øn
ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ giao ti·∫øp gi·ªØa Client v√† Server
trong mini game K√©o ‚Äì B√∫a ‚Äì Bao.
"""

# ======================================
# üéÆ C√°c l·ª±a ch·ªçn trong game
# ======================================
ROCK = "rock"
PAPER = "paper"
SCISSORS = "scissors"
CHOICES = [ROCK, PAPER, SCISSORS]

# ======================================
# üì® C√°c lo·∫°i tin nh·∫Øn (Message Types)
# ======================================
# --- Client ‚Üí Server ---
MSG_CREATE_ROOM = "create_room"         # T·∫°o ph√≤ng m·ªõi
MSG_JOIN_ROOM = "join_room"             # Tham gia ph√≤ng
MSG_LEAVE_ROOM = "leave_room"           # R·ªùi ph√≤ng
MSG_PLAYER_CHOICE = "player_choice"     # G·ª≠i l·ª±a ch·ªçn (k√©o/b√∫a/bao)
MSG_CHAT = "chat_message"               # G·ª≠i tin nh·∫Øn chat
MSG_SET_AVATAR = "set_avatar"           # Ch·ªçn avatar
MSG_SEND_STICKER = "send_sticker"       # G·ª≠i sticker

# --- Server ‚Üí Client ---
MSG_ROOM_CREATED = "room_created"       # Ph√≤ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
MSG_JOIN_SUCCESS = "join_success"       # V√†o ph√≤ng th√†nh c√¥ng
MSG_PLAYER_JOINED = "player_joined"     # C√≥ ng∆∞·ªùi m·ªõi v√†o ph√≤ng
MSG_PLAYER_LEFT = "player_left"         # C√≥ ng∆∞·ªùi r·ªùi ph√≤ng
MSG_GAME_START = "game_start"           # B·∫Øt ƒë·∫ßu v√°n ƒë·∫•u
MSG_GAME_UPDATE = "game_update"         # C·∫≠p nh·∫≠t tr·∫°ng th√°i game
MSG_ROUND_RESULT = "round_result"       # K·∫øt qu·∫£ m·ªôt v√≤ng ƒë·∫•u
MSG_CHAT_BROADCAST = "chat_broadcast"   # Ph√°t tin nh·∫Øn chat t·ªõi t·∫•t c·∫£
MSG_AVATAR_UPDATE = "avatar_update"     # C·∫≠p nh·∫≠t avatar ng∆∞·ªùi ch∆°i
MSG_STICKER_BROADCAST = "sticker_broadcast"  # Ph√°t sticker
MSG_ERROR = "error"                     # Th√¥ng b√°o l·ªói

# ======================================
# üß© C√°c h√†m ti·ªán √≠ch
# ======================================
def create_message(msg_type, payload=None):
    """
    T·∫°o m·ªôt tin nh·∫Øn chu·∫©n d∆∞·ªõi d·∫°ng dictionary.
    D√πng ƒë·ªÉ g·ª≠i gi·ªØa client ‚Üî server.
    """
    message = {"type": msg_type}
    if payload is not None:
        message["payload"] = payload
    return message


def parse_message(raw_data):
    """
    Chuy·ªÉn chu·ªói JSON th√†nh message Python.
    Tr·∫£ v·ªÅ None n·∫øu d·ªØ li·ªáu l·ªói.
    """
    import json
    try:
        return json.loads(raw_data)
    except json.JSONDecodeError:
        return None


def message_to_json(msg):
    """
    Chuy·ªÉn message dictionary sang JSON string
    tr∆∞·ªõc khi g·ª≠i qua socket.
    """
    import json
    return json.dumps(msg)


# ======================================
# ‚öôÔ∏è V√≠ d·ª• s·ª≠ d·ª•ng
# ======================================
if __name__ == "__main__":
    # T·∫°o tin nh·∫Øn: ng∆∞·ªùi ch∆°i ch·ªçn "k√©o"
    msg = create_message(MSG_PLAYER_CHOICE, {"choice": ROCK})
    print("Message Dict:", msg)
    print("Message JSON:", message_to_json(msg))
