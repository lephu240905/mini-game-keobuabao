import asyncio
import json
import random
import string
import websockets
from server.core.game_logic import GameRoom, Player
from shared.protocol import *

# --- Tr·∫°ng th√°i to√†n c·ª•c c·ªßa Server ---
CONNECTED_CLIENTS = set()
rooms = {}
AFK_TIMEOUT = 30  # Th·ªùi gian ch·ªù (gi√¢y) tr∆∞·ªõc khi kick

# --- C√°c h√†m ti·ªán √≠ch ---
def generate_room_code(length=4):
    """T·∫°o m√£ ph√≤ng ng·∫´u nhi√™n v√† duy nh·∫•t."""
    while True:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
        if code not in rooms:
            return code

async def send_message(websocket, msg_type, payload=None):
    """G·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn m·ªôt client c·ª• th·ªÉ.
    Kh√¥ng ki·ªÉm tra attribute c·ª• th·ªÉ (nh∆∞ .closed/.open) v√¨ object c√≥ th·ªÉ kh√°c ki·ªÉu.
    Thay v√†o ƒë√≥ c·ªë g·∫Øng g·ª≠i v√† b·ªè qua l·ªói khi k·∫øt n·ªëi ƒë√£ ƒë√≥ng."""
    try:
        await websocket.send(json.dumps(create_message(msg_type, payload)))
    except (websockets.exceptions.ConnectionClosed, AttributeError):
        # N·∫øu websocket kh√¥ng h·ªó tr·ª£ .send ho·∫∑c ƒë√£ ƒë√≥ng => b·ªè qua
        return
    except Exception as e:
        # B·∫Øt l·ªói chung ƒë·ªÉ kh√¥ng l√†m s·∫≠p server
        print(f"[send_message] L·ªói g·ª≠i ƒë·∫øn client: {e}")

async def broadcast_to_room(room, msg_type, payload=None):
    """G·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng."""
    if not room.players:
        return

    message = json.dumps(create_message(msg_type, payload))
    coros = []
    for p in list(room.players):
        ws = getattr(p, "websocket", None)
        if ws is None:
            continue
        # Th·ª±c hi·ªán g·ª≠i trong try/except ƒë·ªÉ m·ªôt client l·ªói kh√¥ng ·∫£nh h∆∞·ªüng t·ªõi to√†n b·ªô
        async def _safe_send(w, m):
            try:
                await w.send(m)
            except (websockets.exceptions.ConnectionClosed, AttributeError):
                # N·∫øu send l·ªói, b·ªè qua
                return
            except Exception as e:
                print(f"[broadcast_to_room] L·ªói khi g·ª≠i t·ªõi {getattr(p,'name', 'unknown')}: {e}")

        coros.append(_safe_send(ws, message))

    if coros:
        # return_exceptions=True ƒë·ªÉ ti·∫øp t·ª•c g·ª≠i cho c√°c client c√≤n l·∫°i khi c√≥ l·ªói
        await asyncio.gather(*coros, return_exceptions=True)

# --- Logic x·ª≠ l√Ω AFK (Kh√¥ng ho·∫°t ƒë·ªông) ---
async def afk_check_task(room_code):
    """T√°c v·ª• ch·∫°y ng·∫ßm ƒë·ªÉ ƒë·∫øm gi·ªù v√† kick ng∆∞·ªùi ch∆°i AFK."""
    try:
        await asyncio.sleep(AFK_TIMEOUT)
    except asyncio.CancelledError:
        # N·∫øu task b·ªã hu·ª∑ th√¨ ch·ªâ d·ª´ng im l·∫∑ng
        return

    # N·∫øu ph√≤ng ƒë√£ b·ªã x√≥a th√¨ d·ª´ng
    room = rooms.get(room_code)
    if not room:
        return

    try:
        if room.game_state == 'playing' and not room.check_round_end():
            print(f"[AFK] Th·ªùi gian ch·ªù c·ªßa ph√≤ng {room_code} ƒë√£ h·∫øt. ƒêang ki·ªÉm tra...")

            player_choices = room.round_choices.keys()
            afk_players = [p for p in room.players if p.name not in player_choices]

            for player in afk_players:
                print(f"[AFK] Kick ng∆∞·ªùi ch∆°i {player.name} kh·ªèi ph√≤ng {room_code}.")
                try:
                    await send_message(player.websocket, MSG_ERROR, {"message": "B·∫°n ƒë√£ b·ªã kick v√¨ kh√¥ng ho·∫°t ƒë·ªông."})
                    try:
                        await player.websocket.close(code=1000, reason="AFK")
                    except Exception:
                        pass
                except Exception:
                    pass
    except Exception as e:
        print(f"[AFK] L·ªói khi ki·ªÉm tra AFK cho ph√≤ng {room_code}: {e}")

async def start_new_round(room):
    """B·∫Øt ƒë·∫ßu m·ªôt v√≤ng ch∆°i m·ªõi v√† kh·ªüi ƒë·ªông b·ªô ƒë·∫øm gi·ªù AFK."""
    if len(room.players) != 2:
        return

    room.reset_for_new_round()

    # Hu·ª∑ task c≈© n·∫øu c√≤n ch·∫°y (kh√¥ng raise n·∫øu ƒë√£ hu·ª∑)
    if getattr(room, "afk_timer_task", None) and not room.afk_timer_task.done():
        room.afk_timer_task.cancel()

    room.afk_timer_task = asyncio.create_task(afk_check_task(room.room_code))

    await broadcast_to_room(room, MSG_GAME_UPDATE, room.get_state())

# --- H√†m x·ª≠ l√Ω ch√≠nh ---
async def handle_message(websocket, message_json):
    """X·ª≠ l√Ω c√°c tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c t·ª´ client."""
    try:
        message = json.loads(message_json)
        msg_type = message.get("type")
        payload = message.get("payload", {})

        player = next((p for r in rooms.values() for p in r.players if getattr(p, "websocket", None) == websocket), None)
        room = next((r for r in rooms.values() if player in r.players), None) if player else None

        if msg_type == MSG_CREATE_ROOM:
            room_code = generate_room_code()
            new_room = GameRoom(room_code)
            new_player = Player(websocket, payload.get("name", "Player"), payload.get("avatar", "üòÄ"))
            new_room.add_player(new_player)
            rooms[room_code] = new_room
            await send_message(websocket, MSG_ROOM_CREATED, {"room_code": room_code})
            await send_message(websocket, MSG_GAME_UPDATE, new_room.get_state())

        elif msg_type == MSG_JOIN_ROOM:
            room_code = payload.get("room_code")
            target_room = rooms.get(room_code)
            if target_room and len(target_room.players) < 2:
                new_player = Player(websocket, payload.get("name", "Player"), payload.get("avatar", "üòÄ"))
                target_room.add_player(new_player)

                await send_message(websocket, MSG_JOIN_SUCCESS, target_room.get_state())

                if len(target_room.players) == 2:
                    await start_new_round(target_room)
                else:
                    await broadcast_to_room(target_room, MSG_GAME_UPDATE, target_room.get_state())
            else:
                error_msg = "Ph√≤ng ƒë√£ ƒë·∫ßy." if target_room else "Kh√¥ng t√¨m th·∫•y ph√≤ng."
                await send_message(websocket, MSG_ERROR, {"message": error_msg})

        elif msg_type == MSG_PLAYER_CHOICE and player and room and room.game_state == 'playing':
            if room.make_choice(player, payload.get("choice")):
                update_payload = room.get_state()
                update_payload["player_made_choice"] = player.name
                await broadcast_to_room(room, MSG_GAME_UPDATE, update_payload)

            if room.check_round_end():
                if getattr(room, "afk_timer_task", None) and not room.afk_timer_task.done():
                    room.afk_timer_task.cancel()

                result = room.determine_winner()
                await broadcast_to_room(room, MSG_ROUND_RESULT, result)

                system_message_text = ""
                if result.get("result") == "draw":
                    system_message_text = "V√°n ƒë·∫•u k·∫øt th√∫c v·ªõi k·∫øt qu·∫£ H√íA!"
                elif result.get("winner_name"):
                    winner, loser = (room.players[0], room.players[1]) if result["winner_name"] == room.players[0].name else (room.players[1], room.players[0])
                    choice_map = { "rock": "‚úä", "paper": "üñêÔ∏è", "scissors": "‚úåÔ∏è" }
                    system_message_text = (
    f"üî• {winner.name} th·∫Øng! "
    f"({choice_map.get(result['choices'][winner.name])} th·∫Øng {choice_map.get(result['choices'][loser.name])})"
)



                if system_message_text:
                    await broadcast_to_room(room, MSG_CHAT_BROADCAST, {"sender_name": "H·ªá th·ªëng", "sender_avatar": "system", "text": system_message_text})

                # Ch·ªù 3s tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu v√≤ng m·ªõi (gi·ªØ logic c≈©)
                await asyncio.sleep(3)
                await start_new_round(room)

        elif msg_type == MSG_CHAT and player and room:
            chat_msg = {"sender_name": player.name, "sender_avatar": player.avatar, "text": payload.get("text")}
            await broadcast_to_room(room, MSG_CHAT_BROADCAST, chat_msg)

    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {e}")

async def cleanup_connection(websocket):
    """D·ªçn d·∫πp t√†i nguy√™n khi m·ªôt client ng·∫Øt k·∫øt n·ªëi."""
    player_left, room_left = None, None
    for r_code, r in list(rooms.items()):
        p = r.get_player(websocket)
        if p:
            player_left, room_left = p, r
            break

    if player_left and room_left:
        print(f"[DISCONNECTED] {player_left.name} t·ª´ ph√≤ng {room_left.room_code}")
        if getattr(room_left, "afk_timer_task", None) and not room_left.afk_timer_task.done():
            room_left.afk_timer_task.cancel()

        # remove_player tr·∫£ v·ªÅ True n·∫øu ph√≤ng tr·ªëng (theo logic c≈©)
        if room_left.remove_player(websocket):
            print(f"[ROOM CLOSED] Ph√≤ng {room_left.room_code} tr·ªëng v√† ƒë√£ b·ªã ƒë√≥ng.")
            try:
                del rooms[room_left.room_code]
            except KeyError:
                pass
        else:
            await broadcast_to_room(room_left, MSG_PLAYER_LEFT, {"name": player_left.name})
            await broadcast_to_room(room_left, MSG_GAME_UPDATE, room_left.get_state())
    else:
        # N·∫øu client r·ªùi tr∆∞·ªõc khi v√†o ph√≤ng
        print("[DISCONNECTED] Client r·ªùi tr∆∞·ªõc khi v√†o ph√≤ng ho·∫∑c kh√¥ng t√¨m th·∫•y player trong rooms.")

async def handler(websocket):
    """H√†m qu·∫£n l√Ω v√≤ng ƒë·ªùi c·ªßa m·ªói k·∫øt n·ªëi client."""
    CONNECTED_CLIENTS.add(websocket)
    print(f"[NEW CONNECTION] {websocket.remote_address}, t·ªïng s·ªë: {len(CONNECTED_CLIENTS)}")
    try:
        async for message in websocket:
            await handle_message(websocket, message)
    except websockets.exceptions.ConnectionClosed:
        pass
    except Exception as e:
        print(f"[handler] L·ªói: {e}")
    finally:
        await cleanup_connection(websocket)
        CONNECTED_CLIENTS.discard(websocket)
        print(f"[CONNECTION CLOSED] {websocket.remote_address}, t·ªïng s·ªë: {len(CONNECTED_CLIENTS)}")

async def main():
    async with websockets.serve(handler, "0.0.0.0", 8080):
        print("[SERVER STARTED] Listening on ws://0.0.0.0:8080")
        await asyncio.Future()

def start_server():
    asyncio.run(main())
